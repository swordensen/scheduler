{"ast":null,"code":"import { ipcRenderer } from 'electron';\nimport { setSchedule, taskAdded, taskDeleted, taskFailed, taskStarted, taskUpdated, taskWaiting } from '../store/actions/schedule.actions';\nimport { SEND_SCHEDULE_EVENT, TASK_ADDED_EVENT, TASK_DELETED_EVENT, TASK_FAILED_EVENT, TASK_STARTED_EVENT, TASK_UPDATED_EVENT, TASK_WAITING_EVENT } from '../../../../../event-names';\nimport { stopLoading } from '../store/actions/gui.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/material/snack-bar\";\nexport let ScheduleListenerService = /*#__PURE__*/(() => {\n  var _class;\n  class ScheduleListenerService {\n    constructor(store, _snackBar, zone) {\n      this.store = store;\n      this._snackBar = _snackBar;\n      this.zone = zone;\n    }\n    init() {\n      this.registerScheduleListener();\n    }\n    openSnackBar(message) {\n      this.zone.run(() => {\n        const snackBar = this._snackBar.open(message, 'OK', {\n          verticalPosition: 'bottom',\n          horizontalPosition: 'center'\n        });\n        snackBar.onAction().subscribe(() => {\n          snackBar.dismiss();\n        });\n      });\n    }\n    registerScheduleListener() {\n      ipcRenderer.on(SEND_SCHEDULE_EVENT, (event, schedule) => {\n        this.store.dispatch(setSchedule({\n          schedule\n        }));\n        this.store.dispatch(stopLoading());\n      });\n      ipcRenderer.on(TASK_ADDED_EVENT, (event, task) => {\n        this.store.dispatch(taskAdded({\n          task\n        }));\n        this.openSnackBar(`task: ${task.name} added to the schedule`);\n      });\n      ipcRenderer.on(TASK_DELETED_EVENT, (event, task) => {\n        this.store.dispatch(taskDeleted({\n          task\n        }));\n        this.openSnackBar(`task: ${task.name} removed from the schedule`);\n      });\n      ipcRenderer.on(TASK_UPDATED_EVENT, (event, task) => {\n        this.store.dispatch(taskUpdated({\n          task\n        }));\n        this.openSnackBar(`task: ${task.name} has been updated`);\n      });\n      ipcRenderer.on(TASK_STARTED_EVENT, (event, task) => {\n        this.store.dispatch(taskStarted({\n          task\n        }));\n        this.openSnackBar(`task: ${task.name} has started`);\n      });\n      ipcRenderer.on(TASK_FAILED_EVENT, (event, task) => {\n        this.store.dispatch(taskFailed({\n          task\n        }));\n        this.openSnackBar(`task: ${task.name} has failed`);\n      });\n      ipcRenderer.on(TASK_WAITING_EVENT, (even, task) => {\n        this.store.dispatch(taskWaiting({\n          task\n        }));\n        this.openSnackBar(`task: ${task.name} has completed`);\n      });\n    }\n  }\n  _class = ScheduleListenerService;\n  _class.ɵfac = function ScheduleListenerService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.MatSnackBar), i0.ɵɵinject(i0.NgZone));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return ScheduleListenerService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}