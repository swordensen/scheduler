{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { minimizeWindow, maximizeWindow } from '../actions/electron.actions';\nimport { map } from 'rxjs/operators';\nimport { remote } from 'electron';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nexport let ElectronEffects = /*#__PURE__*/(() => {\n  var _class;\n  class ElectronEffects {\n    constructor(actions$) {\n      this.actions$ = actions$;\n      this.minimize$ = createEffect(() => this.actions$.pipe(ofType(minimizeWindow), map(() => remote.getCurrentWindow().minimize())), {\n        dispatch: false\n      });\n      this.maximize$ = createEffect(() => this.actions$.pipe(ofType(maximizeWindow), map(() => {\n        const window = remote.getCurrentWindow();\n        if (window.isMaximized()) {\n          return window.restore();\n        }\n        return window.maximize();\n      })), {\n        dispatch: false\n      });\n    }\n  }\n  _class = ElectronEffects;\n  _class.ɵfac = function ElectronEffects_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.Actions));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac\n  });\n  return ElectronEffects;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}