{"ast":null,"code":"import { SVG } from '@svgdotjs/svg.js';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"clock\"];\nexport let ClockComponent = /*#__PURE__*/(() => {\n  var _class;\n  class ClockComponent {\n    constructor(elRef) {\n      this.elRef = elRef;\n    }\n    ngAfterViewInit() {\n      this.renderClock();\n      // @ts-ignore\n      const resizeObserver = new ResizeObserver(() => {\n        this.rerender();\n      }).observe(this.clockElem.nativeElement);\n    }\n    rerender() {\n      this.clockElem.nativeElement.innerHTML = '';\n      this.renderClock();\n    }\n    /************************************\n    This codepen is part of the svg.js\n    advent calendar. You can find all\n    the pens at twitter: @svg_js\n    *************************************/\n    renderClock() {\n      const width = this.clockElem.nativeElement.clientWidth;\n      const height = this.clockElem.nativeElement.clientHeight;\n      if (width && height) {\n        const backGroundColor = '#03DAC6';\n        const hourHandColor = '#3700B3';\n        const minuteHandColor = '#180edc';\n        const secondHandColor = '#52008d';\n        const realHeight = height - 20;\n        // Create SVG and set viewbox\n        // so that we zoom into the center\n        const canvas = SVG().addTo('#clock').size(width, height).viewbox(-width / 8, -realHeight / 8, width / 4, realHeight / 4);\n        // Big circle\n        canvas.circle(80).center(0, 0).fill('none').stroke({\n          width: 1,\n          color: backGroundColor\n        });\n        // Hours line\n        const hour = canvas.line(0, 0, 0, -20).stroke(hourHandColor);\n        //   .animate(new SVG.Spring(400, 20))\n        // Minutes line\n        const min = canvas.line(0, 0, 0, -30).stroke(minuteHandColor);\n        //   .animate(new SVG.Spring(400, 20))\n        // Seconds line\n        const sec = canvas.line(0, 0, 0, -38).stroke(secondHandColor);\n        //   .animate(new SVG.Spring(400, 20))\n        const update = () => {\n          // Get time\n          const localDate = new Date(Date.now());\n          let h = localDate.getHours();\n          let m = localDate.getMinutes();\n          let s = localDate.getSeconds();\n          // Make sure we see partial hours\n          h += m / 60;\n          // Calculate angle\n          const hAngle = h / 24 * 360;\n          const mAngle = m / 60 * 360;\n          const sAngle = s / 60 * 360;\n          // Rotate\n          hour.transform({\n            rotate: hAngle,\n            origin: [0, 0]\n          });\n          min.transform({\n            rotate: mAngle,\n            origin: [0, 0]\n          });\n          sec.transform({\n            rotate: sAngle,\n            origin: [0, 0]\n          });\n        };\n        setInterval(update, 1000);\n        update();\n      }\n    }\n  }\n  _class = ClockComponent;\n  _class.ɵfac = function ClockComponent_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"app-clock\"]],\n    viewQuery: function ClockComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clockElem = _t.first);\n      }\n    },\n    decls: 2,\n    vars: 0,\n    consts: [[\"id\", \"clock\"], [\"clock\", \"\"]],\n    template: function ClockComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0, 1);\n      }\n    },\n    styles: [\"[_nghost-%COMP%], div[_ngcontent-%COMP%]{display:block;height:100%;width:100%}\"]\n  });\n  return ClockComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}