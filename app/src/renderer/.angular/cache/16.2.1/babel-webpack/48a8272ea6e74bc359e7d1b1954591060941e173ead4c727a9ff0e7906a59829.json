{"ast":null,"code":"(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(\"cronstrue\", [], factory);else if (typeof exports === 'object') exports[\"cronstrue\"] = factory();else root[\"cronstrue\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function () {\n  return (/******/function (modules) {\n      // webpackBootstrap\n      /******/ // The module cache\n      /******/\n      var installedModules = {};\n      /******/\n      /******/ // The require function\n      /******/\n      function __webpack_require__(moduleId) {\n        /******/\n        /******/ // Check if module is in cache\n        /******/if (installedModules[moduleId]) {\n          /******/return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/ // Create a new module (and put it into the cache)\n        /******/\n        var module = installedModules[moduleId] = {\n          /******/i: moduleId,\n          /******/l: false,\n          /******/exports: {}\n          /******/\n        };\n        /******/\n        /******/ // Execute the module function\n        /******/\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n        /******/ // Flag the module as loaded\n        /******/\n        module.l = true;\n        /******/\n        /******/ // Return the exports of the module\n        /******/\n        return module.exports;\n        /******/\n      }\n      /******/\n      /******/\n      /******/ // expose the modules object (__webpack_modules__)\n      /******/\n      __webpack_require__.m = modules;\n      /******/\n      /******/ // expose the module cache\n      /******/\n      __webpack_require__.c = installedModules;\n      /******/\n      /******/ // define getter function for harmony exports\n      /******/\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/if (!__webpack_require__.o(exports, name)) {\n          /******/Object.defineProperty(exports, name, {\n            enumerable: true,\n            get: getter\n          });\n          /******/\n        }\n        /******/\n      };\n      /******/\n      /******/ // define __esModule on exports\n      /******/\n      __webpack_require__.r = function (exports) {\n        /******/if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n          /******/Object.defineProperty(exports, Symbol.toStringTag, {\n            value: 'Module'\n          });\n          /******/\n        }\n        /******/\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n        /******/\n      };\n      /******/\n      /******/ // create a fake namespace object\n      /******/ // mode & 1: value is a module id, require it\n      /******/ // mode & 2: merge all properties of value into the ns\n      /******/ // mode & 4: return value when already ns object\n      /******/ // mode & 8|1: behave like require\n      /******/\n      __webpack_require__.t = function (value, mode) {\n        /******/if (mode & 1) value = __webpack_require__(value);\n        /******/\n        if (mode & 8) return value;\n        /******/\n        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n        /******/\n        var ns = Object.create(null);\n        /******/\n        __webpack_require__.r(ns);\n        /******/\n        Object.defineProperty(ns, 'default', {\n          enumerable: true,\n          value: value\n        });\n        /******/\n        if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {\n          return value[key];\n        }.bind(null, key));\n        /******/\n        return ns;\n        /******/\n      };\n      /******/\n      /******/ // getDefaultExport function for compatibility with non-harmony modules\n      /******/\n      __webpack_require__.n = function (module) {\n        /******/var getter = module && module.__esModule ? /******/function getDefault() {\n          return module['default'];\n        } : /******/function getModuleExports() {\n          return module;\n        };\n        /******/\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n        return getter;\n        /******/\n      };\n      /******/\n      /******/ // Object.prototype.hasOwnProperty.call\n      /******/\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n      /******/ // __webpack_public_path__\n      /******/\n      __webpack_require__.p = \"\";\n      /******/\n      /******/\n      /******/ // Load entry module and return exports\n      /******/\n      return __webpack_require__(__webpack_require__.s = 5);\n      /******/\n    }\n    /************************************************************************/\n    /******/([/* 0 */\n    /***/function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.ExpressionDescriptor = void 0;\n      var stringUtilities_1 = __webpack_require__(1);\n      var cronParser_1 = __webpack_require__(2);\n      var ExpressionDescriptor = function () {\n        function ExpressionDescriptor(expression, options) {\n          this.expression = expression;\n          this.options = options;\n          this.expressionParts = new Array(5);\n          if (ExpressionDescriptor.locales[options.locale]) {\n            this.i18n = ExpressionDescriptor.locales[options.locale];\n          } else {\n            console.warn(\"Locale '\" + options.locale + \"' could not be found; falling back to 'en'.\");\n            this.i18n = ExpressionDescriptor.locales[\"en\"];\n          }\n          if (options.use24HourTimeFormat === undefined) {\n            options.use24HourTimeFormat = this.i18n.use24HourTimeFormatByDefault();\n          }\n        }\n        ExpressionDescriptor.toString = function (expression, _a) {\n          var _b = _a === void 0 ? {} : _a,\n            _c = _b.throwExceptionOnParseError,\n            throwExceptionOnParseError = _c === void 0 ? true : _c,\n            _d = _b.verbose,\n            verbose = _d === void 0 ? false : _d,\n            _e = _b.dayOfWeekStartIndexZero,\n            dayOfWeekStartIndexZero = _e === void 0 ? true : _e,\n            use24HourTimeFormat = _b.use24HourTimeFormat,\n            _f = _b.locale,\n            locale = _f === void 0 ? \"en\" : _f;\n          var options = {\n            throwExceptionOnParseError: throwExceptionOnParseError,\n            verbose: verbose,\n            dayOfWeekStartIndexZero: dayOfWeekStartIndexZero,\n            use24HourTimeFormat: use24HourTimeFormat,\n            locale: locale\n          };\n          var descripter = new ExpressionDescriptor(expression, options);\n          return descripter.getFullDescription();\n        };\n        ExpressionDescriptor.initialize = function (localesLoader) {\n          ExpressionDescriptor.specialCharacters = [\"/\", \"-\", \",\", \"*\"];\n          localesLoader.load(ExpressionDescriptor.locales);\n        };\n        ExpressionDescriptor.prototype.getFullDescription = function () {\n          var description = \"\";\n          try {\n            var parser = new cronParser_1.CronParser(this.expression, this.options.dayOfWeekStartIndexZero);\n            this.expressionParts = parser.parse();\n            var timeSegment = this.getTimeOfDayDescription();\n            var dayOfMonthDesc = this.getDayOfMonthDescription();\n            var monthDesc = this.getMonthDescription();\n            var dayOfWeekDesc = this.getDayOfWeekDescription();\n            var yearDesc = this.getYearDescription();\n            description += timeSegment + dayOfMonthDesc + dayOfWeekDesc + monthDesc + yearDesc;\n            description = this.transformVerbosity(description, this.options.verbose);\n            description = description.charAt(0).toLocaleUpperCase() + description.substr(1);\n          } catch (ex) {\n            if (!this.options.throwExceptionOnParseError) {\n              description = this.i18n.anErrorOccuredWhenGeneratingTheExpressionD();\n            } else {\n              throw \"\" + ex;\n            }\n          }\n          return description;\n        };\n        ExpressionDescriptor.prototype.getTimeOfDayDescription = function () {\n          var secondsExpression = this.expressionParts[0];\n          var minuteExpression = this.expressionParts[1];\n          var hourExpression = this.expressionParts[2];\n          var description = \"\";\n          if (!stringUtilities_1.StringUtilities.containsAny(minuteExpression, ExpressionDescriptor.specialCharacters) && !stringUtilities_1.StringUtilities.containsAny(hourExpression, ExpressionDescriptor.specialCharacters) && !stringUtilities_1.StringUtilities.containsAny(secondsExpression, ExpressionDescriptor.specialCharacters)) {\n            description += this.i18n.atSpace() + this.formatTime(hourExpression, minuteExpression, secondsExpression);\n          } else if (!secondsExpression && minuteExpression.indexOf(\"-\") > -1 && !(minuteExpression.indexOf(\",\") > -1) && !(minuteExpression.indexOf(\"/\") > -1) && !stringUtilities_1.StringUtilities.containsAny(hourExpression, ExpressionDescriptor.specialCharacters)) {\n            var minuteParts = minuteExpression.split(\"-\");\n            description += stringUtilities_1.StringUtilities.format(this.i18n.everyMinuteBetweenX0AndX1(), this.formatTime(hourExpression, minuteParts[0], \"\"), this.formatTime(hourExpression, minuteParts[1], \"\"));\n          } else if (!secondsExpression && hourExpression.indexOf(\",\") > -1 && hourExpression.indexOf(\"-\") == -1 && hourExpression.indexOf(\"/\") == -1 && !stringUtilities_1.StringUtilities.containsAny(minuteExpression, ExpressionDescriptor.specialCharacters)) {\n            var hourParts = hourExpression.split(\",\");\n            description += this.i18n.at();\n            for (var i = 0; i < hourParts.length; i++) {\n              description += \" \";\n              description += this.formatTime(hourParts[i], minuteExpression, \"\");\n              if (i < hourParts.length - 2) {\n                description += \",\";\n              }\n              if (i == hourParts.length - 2) {\n                description += this.i18n.spaceAnd();\n              }\n            }\n          } else {\n            var secondsDescription = this.getSecondsDescription();\n            var minutesDescription = this.getMinutesDescription();\n            var hoursDescription = this.getHoursDescription();\n            description += secondsDescription;\n            if (description.length > 0 && minutesDescription.length > 0) {\n              description += \", \";\n            }\n            description += minutesDescription;\n            if (minutesDescription === hoursDescription) {\n              return description;\n            }\n            if (description.length > 0 && hoursDescription.length > 0) {\n              description += \", \";\n            }\n            description += hoursDescription;\n          }\n          return description;\n        };\n        ExpressionDescriptor.prototype.getSecondsDescription = function () {\n          var _this = this;\n          var description = this.getSegmentDescription(this.expressionParts[0], this.i18n.everySecond(), function (s) {\n            return s;\n          }, function (s) {\n            return stringUtilities_1.StringUtilities.format(_this.i18n.everyX0Seconds(), s);\n          }, function (s) {\n            return _this.i18n.secondsX0ThroughX1PastTheMinute();\n          }, function (s) {\n            return s == \"0\" ? \"\" : parseInt(s) < 20 ? _this.i18n.atX0SecondsPastTheMinute() : _this.i18n.atX0SecondsPastTheMinuteGt20() || _this.i18n.atX0SecondsPastTheMinute();\n          });\n          return description;\n        };\n        ExpressionDescriptor.prototype.getMinutesDescription = function () {\n          var _this = this;\n          var secondsExpression = this.expressionParts[0];\n          var hourExpression = this.expressionParts[2];\n          var description = this.getSegmentDescription(this.expressionParts[1], this.i18n.everyMinute(), function (s) {\n            return s;\n          }, function (s) {\n            return stringUtilities_1.StringUtilities.format(_this.i18n.everyX0Minutes(), s);\n          }, function (s) {\n            return _this.i18n.minutesX0ThroughX1PastTheHour();\n          }, function (s) {\n            try {\n              return s == \"0\" && hourExpression.indexOf(\"/\") == -1 && secondsExpression == \"\" ? _this.i18n.everyHour() : parseInt(s) < 20 ? _this.i18n.atX0MinutesPastTheHour() : _this.i18n.atX0MinutesPastTheHourGt20() || _this.i18n.atX0MinutesPastTheHour();\n            } catch (e) {\n              return _this.i18n.atX0MinutesPastTheHour();\n            }\n          });\n          return description;\n        };\n        ExpressionDescriptor.prototype.getHoursDescription = function () {\n          var _this = this;\n          var expression = this.expressionParts[2];\n          var description = this.getSegmentDescription(expression, this.i18n.everyHour(), function (s) {\n            return _this.formatTime(s, \"0\", \"\");\n          }, function (s) {\n            return stringUtilities_1.StringUtilities.format(_this.i18n.everyX0Hours(), s);\n          }, function (s) {\n            return _this.i18n.betweenX0AndX1();\n          }, function (s) {\n            return _this.i18n.atX0();\n          });\n          return description;\n        };\n        ExpressionDescriptor.prototype.getDayOfWeekDescription = function () {\n          var _this = this;\n          var daysOfWeekNames = this.i18n.daysOfTheWeek();\n          var description = null;\n          if (this.expressionParts[5] == \"*\") {\n            description = \"\";\n          } else {\n            description = this.getSegmentDescription(this.expressionParts[5], this.i18n.commaEveryDay(), function (s) {\n              var exp = s;\n              if (s.indexOf(\"#\") > -1) {\n                exp = s.substr(0, s.indexOf(\"#\"));\n              } else if (s.indexOf(\"L\") > -1) {\n                exp = exp.replace(\"L\", \"\");\n              }\n              return daysOfWeekNames[parseInt(exp)];\n            }, function (s) {\n              if (parseInt(s) == 1) {\n                return \"\";\n              } else {\n                return stringUtilities_1.StringUtilities.format(_this.i18n.commaEveryX0DaysOfTheWeek(), s);\n              }\n            }, function (s) {\n              return _this.i18n.commaX0ThroughX1();\n            }, function (s) {\n              var format = null;\n              if (s.indexOf(\"#\") > -1) {\n                var dayOfWeekOfMonthNumber = s.substring(s.indexOf(\"#\") + 1);\n                var dayOfWeekOfMonthDescription = null;\n                switch (dayOfWeekOfMonthNumber) {\n                  case \"1\":\n                    dayOfWeekOfMonthDescription = _this.i18n.first();\n                    break;\n                  case \"2\":\n                    dayOfWeekOfMonthDescription = _this.i18n.second();\n                    break;\n                  case \"3\":\n                    dayOfWeekOfMonthDescription = _this.i18n.third();\n                    break;\n                  case \"4\":\n                    dayOfWeekOfMonthDescription = _this.i18n.fourth();\n                    break;\n                  case \"5\":\n                    dayOfWeekOfMonthDescription = _this.i18n.fifth();\n                    break;\n                }\n                format = _this.i18n.commaOnThe() + dayOfWeekOfMonthDescription + _this.i18n.spaceX0OfTheMonth();\n              } else if (s.indexOf(\"L\") > -1) {\n                format = _this.i18n.commaOnTheLastX0OfTheMonth();\n              } else {\n                var domSpecified = _this.expressionParts[3] != \"*\";\n                format = domSpecified ? _this.i18n.commaAndOnX0() : _this.i18n.commaOnlyOnX0();\n              }\n              return format;\n            });\n          }\n          return description;\n        };\n        ExpressionDescriptor.prototype.getMonthDescription = function () {\n          var _this = this;\n          var monthNames = this.i18n.monthsOfTheYear();\n          var description = this.getSegmentDescription(this.expressionParts[4], \"\", function (s) {\n            return monthNames[parseInt(s) - 1];\n          }, function (s) {\n            if (parseInt(s) == 1) {\n              return \"\";\n            } else {\n              return stringUtilities_1.StringUtilities.format(_this.i18n.commaEveryX0Months(), s);\n            }\n          }, function (s) {\n            return _this.i18n.commaMonthX0ThroughMonthX1() || _this.i18n.commaX0ThroughX1();\n          }, function (s) {\n            return _this.i18n.commaOnlyInMonthX0 ? _this.i18n.commaOnlyInMonthX0() : _this.i18n.commaOnlyInX0();\n          });\n          return description;\n        };\n        ExpressionDescriptor.prototype.getDayOfMonthDescription = function () {\n          var _this = this;\n          var description = null;\n          var expression = this.expressionParts[3];\n          switch (expression) {\n            case \"L\":\n              description = this.i18n.commaOnTheLastDayOfTheMonth();\n              break;\n            case \"WL\":\n            case \"LW\":\n              description = this.i18n.commaOnTheLastWeekdayOfTheMonth();\n              break;\n            default:\n              var weekDayNumberMatches = expression.match(/(\\d{1,2}W)|(W\\d{1,2})/);\n              if (weekDayNumberMatches) {\n                var dayNumber = parseInt(weekDayNumberMatches[0].replace(\"W\", \"\"));\n                var dayString = dayNumber == 1 ? this.i18n.firstWeekday() : stringUtilities_1.StringUtilities.format(this.i18n.weekdayNearestDayX0(), dayNumber.toString());\n                description = stringUtilities_1.StringUtilities.format(this.i18n.commaOnTheX0OfTheMonth(), dayString);\n                break;\n              } else {\n                var lastDayOffSetMatches = expression.match(/L-(\\d{1,2})/);\n                if (lastDayOffSetMatches) {\n                  var offSetDays = lastDayOffSetMatches[1];\n                  description = stringUtilities_1.StringUtilities.format(this.i18n.commaDaysBeforeTheLastDayOfTheMonth(), offSetDays);\n                  break;\n                } else if (expression == \"*\" && this.expressionParts[5] != \"*\") {\n                  return \"\";\n                } else {\n                  description = this.getSegmentDescription(expression, this.i18n.commaEveryDay(), function (s) {\n                    return s == \"L\" ? _this.i18n.lastDay() : _this.i18n.dayX0 ? stringUtilities_1.StringUtilities.format(_this.i18n.dayX0(), s) : s;\n                  }, function (s) {\n                    return s == \"1\" ? _this.i18n.commaEveryDay() : _this.i18n.commaEveryX0Days();\n                  }, function (s) {\n                    return _this.i18n.commaBetweenDayX0AndX1OfTheMonth();\n                  }, function (s) {\n                    return _this.i18n.commaOnDayX0OfTheMonth();\n                  });\n                }\n                break;\n              }\n          }\n          return description;\n        };\n        ExpressionDescriptor.prototype.getYearDescription = function () {\n          var _this = this;\n          var description = this.getSegmentDescription(this.expressionParts[6], \"\", function (s) {\n            return /^\\d+$/.test(s) ? new Date(parseInt(s), 1).getFullYear().toString() : s;\n          }, function (s) {\n            return stringUtilities_1.StringUtilities.format(_this.i18n.commaEveryX0Years(), s);\n          }, function (s) {\n            return _this.i18n.commaYearX0ThroughYearX1() || _this.i18n.commaX0ThroughX1();\n          }, function (s) {\n            return _this.i18n.commaOnlyInYearX0 ? _this.i18n.commaOnlyInYearX0() : _this.i18n.commaOnlyInX0();\n          });\n          return description;\n        };\n        ExpressionDescriptor.prototype.getSegmentDescription = function (expression, allDescription, getSingleItemDescription, getIncrementDescriptionFormat, getRangeDescriptionFormat, getDescriptionFormat) {\n          var description = null;\n          var doesExpressionContainIncrement = expression.indexOf(\"/\") > -1;\n          var doesExpressionContainRange = expression.indexOf(\"-\") > -1;\n          var doesExpressionContainMultipleValues = expression.indexOf(\",\") > -1;\n          if (!expression) {\n            description = \"\";\n          } else if (expression === \"*\") {\n            description = allDescription;\n          } else if (!doesExpressionContainIncrement && !doesExpressionContainRange && !doesExpressionContainMultipleValues) {\n            description = stringUtilities_1.StringUtilities.format(getDescriptionFormat(expression), getSingleItemDescription(expression));\n          } else if (doesExpressionContainMultipleValues) {\n            var segments = expression.split(\",\");\n            var descriptionContent = \"\";\n            for (var i = 0; i < segments.length; i++) {\n              if (i > 0 && segments.length > 2) {\n                descriptionContent += \",\";\n                if (i < segments.length - 1) {\n                  descriptionContent += \" \";\n                }\n              }\n              if (i > 0 && segments.length > 1 && (i == segments.length - 1 || segments.length == 2)) {\n                descriptionContent += this.i18n.spaceAnd() + \" \";\n              }\n              if (segments[i].indexOf(\"/\") > -1 || segments[i].indexOf(\"-\") > -1) {\n                var isSegmentRangeWithoutIncrement = segments[i].indexOf(\"-\") > -1 && segments[i].indexOf(\"/\") == -1;\n                var currentDescriptionContent = this.getSegmentDescription(segments[i], allDescription, getSingleItemDescription, getIncrementDescriptionFormat, isSegmentRangeWithoutIncrement ? this.i18n.commaX0ThroughX1 : getRangeDescriptionFormat, getDescriptionFormat);\n                if (isSegmentRangeWithoutIncrement) {\n                  currentDescriptionContent = currentDescriptionContent.replace(\", \", \"\");\n                }\n                descriptionContent += currentDescriptionContent;\n              } else if (!doesExpressionContainIncrement) {\n                descriptionContent += getSingleItemDescription(segments[i]);\n              } else {\n                descriptionContent += this.getSegmentDescription(segments[i], allDescription, getSingleItemDescription, getIncrementDescriptionFormat, getRangeDescriptionFormat, getDescriptionFormat);\n              }\n            }\n            if (!doesExpressionContainIncrement) {\n              description = stringUtilities_1.StringUtilities.format(getDescriptionFormat(expression), descriptionContent);\n            } else {\n              description = descriptionContent;\n            }\n          } else if (doesExpressionContainIncrement) {\n            var segments = expression.split(\"/\");\n            description = stringUtilities_1.StringUtilities.format(getIncrementDescriptionFormat(segments[1]), segments[1]);\n            if (segments[0].indexOf(\"-\") > -1) {\n              var rangeSegmentDescription = this.generateRangeSegmentDescription(segments[0], getRangeDescriptionFormat, getSingleItemDescription);\n              if (rangeSegmentDescription.indexOf(\", \") != 0) {\n                description += \", \";\n              }\n              description += rangeSegmentDescription;\n            } else if (segments[0].indexOf(\"*\") == -1) {\n              var rangeItemDescription = stringUtilities_1.StringUtilities.format(getDescriptionFormat(segments[0]), getSingleItemDescription(segments[0]));\n              rangeItemDescription = rangeItemDescription.replace(\", \", \"\");\n              description += stringUtilities_1.StringUtilities.format(this.i18n.commaStartingX0(), rangeItemDescription);\n            }\n          } else if (doesExpressionContainRange) {\n            description = this.generateRangeSegmentDescription(expression, getRangeDescriptionFormat, getSingleItemDescription);\n          }\n          return description;\n        };\n        ExpressionDescriptor.prototype.generateRangeSegmentDescription = function (rangeExpression, getRangeDescriptionFormat, getSingleItemDescription) {\n          var description = \"\";\n          var rangeSegments = rangeExpression.split(\"-\");\n          var rangeSegment1Description = getSingleItemDescription(rangeSegments[0]);\n          var rangeSegment2Description = getSingleItemDescription(rangeSegments[1]);\n          rangeSegment2Description = rangeSegment2Description.replace(\":00\", \":59\");\n          var rangeDescriptionFormat = getRangeDescriptionFormat(rangeExpression);\n          description += stringUtilities_1.StringUtilities.format(rangeDescriptionFormat, rangeSegment1Description, rangeSegment2Description);\n          return description;\n        };\n        ExpressionDescriptor.prototype.formatTime = function (hourExpression, minuteExpression, secondExpression) {\n          var hour = parseInt(hourExpression);\n          var period = \"\";\n          var setPeriodBeforeTime = false;\n          if (!this.options.use24HourTimeFormat) {\n            setPeriodBeforeTime = this.i18n.setPeriodBeforeTime && this.i18n.setPeriodBeforeTime();\n            period = setPeriodBeforeTime ? this.getPeriod(hour) + \" \" : \" \" + this.getPeriod(hour);\n            if (hour > 12) {\n              hour -= 12;\n            }\n            if (hour === 0) {\n              hour = 12;\n            }\n          }\n          var minute = minuteExpression;\n          var second = \"\";\n          if (secondExpression) {\n            second = \":\" + (\"00\" + secondExpression).substring(secondExpression.length);\n          }\n          return \"\" + (setPeriodBeforeTime ? period : \"\") + (\"00\" + hour.toString()).substring(hour.toString().length) + \":\" + (\"00\" + minute.toString()).substring(minute.toString().length) + second + (!setPeriodBeforeTime ? period : \"\");\n        };\n        ExpressionDescriptor.prototype.transformVerbosity = function (description, useVerboseFormat) {\n          if (!useVerboseFormat) {\n            description = description.replace(new RegExp(\", \" + this.i18n.everyMinute(), \"g\"), \"\");\n            description = description.replace(new RegExp(\", \" + this.i18n.everyHour(), \"g\"), \"\");\n            description = description.replace(new RegExp(this.i18n.commaEveryDay(), \"g\"), \"\");\n            description = description.replace(/\\, ?$/, \"\");\n          }\n          return description;\n        };\n        ExpressionDescriptor.prototype.getPeriod = function (hour) {\n          return hour >= 12 ? this.i18n.pm && this.i18n.pm() || \"PM\" : this.i18n.am && this.i18n.am() || \"AM\";\n        };\n        ExpressionDescriptor.locales = {};\n        return ExpressionDescriptor;\n      }();\n      exports.ExpressionDescriptor = ExpressionDescriptor;\n\n      /***/\n    }, /* 1 */\n    /***/function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.StringUtilities = void 0;\n      var StringUtilities = function () {\n        function StringUtilities() {}\n        StringUtilities.format = function (template) {\n          var values = [];\n          for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n          }\n          return template.replace(/%s/g, function () {\n            return values.shift();\n          });\n        };\n        StringUtilities.containsAny = function (text, searchStrings) {\n          return searchStrings.some(function (c) {\n            return text.indexOf(c) > -1;\n          });\n        };\n        return StringUtilities;\n      }();\n      exports.StringUtilities = StringUtilities;\n\n      /***/\n    }, /* 2 */\n    /***/function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.CronParser = void 0;\n      var rangeValidator_1 = __webpack_require__(3);\n      var CronParser = function () {\n        function CronParser(expression, dayOfWeekStartIndexZero) {\n          if (dayOfWeekStartIndexZero === void 0) {\n            dayOfWeekStartIndexZero = true;\n          }\n          this.expression = expression;\n          this.dayOfWeekStartIndexZero = dayOfWeekStartIndexZero;\n        }\n        CronParser.prototype.parse = function () {\n          var parsed = this.extractParts(this.expression);\n          this.normalize(parsed);\n          this.validate(parsed);\n          return parsed;\n        };\n        CronParser.prototype.extractParts = function (expression) {\n          if (!this.expression) {\n            throw new Error(\"Expression is empty\");\n          }\n          var parsed = expression.trim().split(/[ ]+/);\n          if (parsed.length < 5) {\n            throw new Error(\"Expression has only \" + parsed.length + \" part\" + (parsed.length == 1 ? \"\" : \"s\") + \". At least 5 parts are required.\");\n          } else if (parsed.length == 5) {\n            parsed.unshift(\"\");\n            parsed.push(\"\");\n          } else if (parsed.length == 6) {\n            var isYearWithNoSecondsPart = /\\d{4}$/.test(parsed[5]) || parsed[4] == \"?\" || parsed[2] == \"?\";\n            if (isYearWithNoSecondsPart) {\n              parsed.unshift(\"\");\n            } else {\n              parsed.push(\"\");\n            }\n          } else if (parsed.length > 7) {\n            throw new Error(\"Expression has \" + parsed.length + \" parts; too many!\");\n          }\n          return parsed;\n        };\n        CronParser.prototype.normalize = function (expressionParts) {\n          var _this = this;\n          expressionParts[3] = expressionParts[3].replace(\"?\", \"*\");\n          expressionParts[5] = expressionParts[5].replace(\"?\", \"*\");\n          expressionParts[2] = expressionParts[2].replace(\"?\", \"*\");\n          if (expressionParts[0].indexOf(\"0/\") == 0) {\n            expressionParts[0] = expressionParts[0].replace(\"0/\", \"*/\");\n          }\n          if (expressionParts[1].indexOf(\"0/\") == 0) {\n            expressionParts[1] = expressionParts[1].replace(\"0/\", \"*/\");\n          }\n          if (expressionParts[2].indexOf(\"0/\") == 0) {\n            expressionParts[2] = expressionParts[2].replace(\"0/\", \"*/\");\n          }\n          if (expressionParts[3].indexOf(\"1/\") == 0) {\n            expressionParts[3] = expressionParts[3].replace(\"1/\", \"*/\");\n          }\n          if (expressionParts[4].indexOf(\"1/\") == 0) {\n            expressionParts[4] = expressionParts[4].replace(\"1/\", \"*/\");\n          }\n          if (expressionParts[6].indexOf(\"1/\") == 0) {\n            expressionParts[6] = expressionParts[6].replace(\"1/\", \"*/\");\n          }\n          expressionParts[5] = expressionParts[5].replace(/(^\\d)|([^#/\\s]\\d)/g, function (t) {\n            var dowDigits = t.replace(/\\D/, \"\");\n            var dowDigitsAdjusted = dowDigits;\n            if (_this.dayOfWeekStartIndexZero) {\n              if (dowDigits == \"7\") {\n                dowDigitsAdjusted = \"0\";\n              }\n            } else {\n              dowDigitsAdjusted = (parseInt(dowDigits) - 1).toString();\n            }\n            return t.replace(dowDigits, dowDigitsAdjusted);\n          });\n          if (expressionParts[5] == \"L\") {\n            expressionParts[5] = \"6\";\n          }\n          if (expressionParts[3] == \"?\") {\n            expressionParts[3] = \"*\";\n          }\n          if (expressionParts[3].indexOf(\"W\") > -1 && (expressionParts[3].indexOf(\",\") > -1 || expressionParts[3].indexOf(\"-\") > -1)) {\n            throw new Error(\"The 'W' character can be specified only when the day-of-month is a single day, not a range or list of days.\");\n          }\n          var days = {\n            SUN: 0,\n            MON: 1,\n            TUE: 2,\n            WED: 3,\n            THU: 4,\n            FRI: 5,\n            SAT: 6\n          };\n          for (var day in days) {\n            expressionParts[5] = expressionParts[5].replace(new RegExp(day, \"gi\"), days[day].toString());\n          }\n          var months = {\n            JAN: 1,\n            FEB: 2,\n            MAR: 3,\n            APR: 4,\n            MAY: 5,\n            JUN: 6,\n            JUL: 7,\n            AUG: 8,\n            SEP: 9,\n            OCT: 10,\n            NOV: 11,\n            DEC: 12\n          };\n          for (var month in months) {\n            expressionParts[4] = expressionParts[4].replace(new RegExp(month, \"gi\"), months[month].toString());\n          }\n          if (expressionParts[0] == \"0\") {\n            expressionParts[0] = \"\";\n          }\n          if (!/\\*|\\-|\\,|\\//.test(expressionParts[2]) && (/\\*|\\//.test(expressionParts[1]) || /\\*|\\//.test(expressionParts[0]))) {\n            expressionParts[2] += \"-\" + expressionParts[2];\n          }\n          for (var i = 0; i < expressionParts.length; i++) {\n            if (expressionParts[i].indexOf(\",\") != -1) {\n              expressionParts[i] = expressionParts[i].split(\",\").filter(function (str) {\n                return str !== \"\";\n              }).join(\",\") || \"*\";\n            }\n            if (expressionParts[i] == \"*/1\") {\n              expressionParts[i] = \"*\";\n            }\n            if (expressionParts[i].indexOf(\"/\") > -1 && !/^\\*|\\-|\\,/.test(expressionParts[i])) {\n              var stepRangeThrough = null;\n              switch (i) {\n                case 4:\n                  stepRangeThrough = \"12\";\n                  break;\n                case 5:\n                  stepRangeThrough = \"6\";\n                  break;\n                case 6:\n                  stepRangeThrough = \"9999\";\n                  break;\n                default:\n                  stepRangeThrough = null;\n                  break;\n              }\n              if (stepRangeThrough != null) {\n                var parts = expressionParts[i].split(\"/\");\n                expressionParts[i] = parts[0] + \"-\" + stepRangeThrough + \"/\" + parts[1];\n              }\n            }\n          }\n        };\n        CronParser.prototype.validate = function (parsed) {\n          this.assertNoInvalidCharacters(\"DOW\", parsed[5]);\n          this.assertNoInvalidCharacters(\"DOM\", parsed[3]);\n          this.validateRange(parsed);\n        };\n        CronParser.prototype.validateRange = function (parsed) {\n          rangeValidator_1.default.secondRange(parsed[0]);\n          rangeValidator_1.default.minuteRange(parsed[1]);\n          rangeValidator_1.default.hourRange(parsed[2]);\n          rangeValidator_1.default.dayOfMonthRange(parsed[3]);\n          rangeValidator_1.default.monthRange(parsed[4]);\n          rangeValidator_1.default.dayOfWeekRange(parsed[5]);\n        };\n        CronParser.prototype.assertNoInvalidCharacters = function (partDescription, expression) {\n          var invalidChars = expression.match(/[A-KM-VX-Z]+/gi);\n          if (invalidChars && invalidChars.length) {\n            throw new Error(partDescription + \" part contains invalid values: '\" + invalidChars.toString() + \"'\");\n          }\n        };\n        return CronParser;\n      }();\n      exports.CronParser = CronParser;\n\n      /***/\n    }, /* 3 */\n    /***/function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      function assert(value, message) {\n        if (!value) {\n          throw new Error(message);\n        }\n      }\n      var RangeValidator = function () {\n        function RangeValidator() {}\n        RangeValidator.secondRange = function (parse) {\n          var parsed = parse.split(',');\n          for (var i = 0; i < parsed.length; i++) {\n            if (!isNaN(parseInt(parsed[i], 10))) {\n              var second = parseInt(parsed[i], 10);\n              assert(second >= 0 && second <= 59, 'seconds part must be >= 0 and <= 59');\n            }\n          }\n        };\n        RangeValidator.minuteRange = function (parse) {\n          var parsed = parse.split(',');\n          for (var i = 0; i < parsed.length; i++) {\n            if (!isNaN(parseInt(parsed[i], 10))) {\n              var minute = parseInt(parsed[i], 10);\n              assert(minute >= 0 && minute <= 59, 'minutes part must be >= 0 and <= 59');\n            }\n          }\n        };\n        RangeValidator.hourRange = function (parse) {\n          var parsed = parse.split(',');\n          for (var i = 0; i < parsed.length; i++) {\n            if (!isNaN(parseInt(parsed[i], 10))) {\n              var hour = parseInt(parsed[i], 10);\n              assert(hour >= 0 && hour <= 23, 'hours part must be >= 0 and <= 23');\n            }\n          }\n        };\n        RangeValidator.dayOfMonthRange = function (parse) {\n          var parsed = parse.split(',');\n          for (var i = 0; i < parsed.length; i++) {\n            if (!isNaN(parseInt(parsed[i], 10))) {\n              var dayOfMonth = parseInt(parsed[i], 10);\n              assert(dayOfMonth >= 1 && dayOfMonth <= 31, 'DOM part must be >= 1 and <= 31');\n            }\n          }\n        };\n        RangeValidator.monthRange = function (parse) {\n          var parsed = parse.split(',');\n          for (var i = 0; i < parsed.length; i++) {\n            if (!isNaN(parseInt(parsed[i], 10))) {\n              var month = parseInt(parsed[i], 10);\n              assert(month >= 1 && month <= 12, 'month part must be >= 1 and <= 12');\n            }\n          }\n        };\n        RangeValidator.dayOfWeekRange = function (parse) {\n          var parsed = parse.split(',');\n          for (var i = 0; i < parsed.length; i++) {\n            if (!isNaN(parseInt(parsed[i], 10))) {\n              var dayOfWeek = parseInt(parsed[i], 10);\n              assert(dayOfWeek >= 0 && dayOfWeek <= 6, 'DOW part must be >= 0 and <= 6');\n            }\n          }\n        };\n        return RangeValidator;\n      }();\n      exports.default = RangeValidator;\n\n      /***/\n    }, /* 4 */\n    /***/function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.en = void 0;\n      var en = function () {\n        function en() {}\n        en.prototype.atX0SecondsPastTheMinuteGt20 = function () {\n          return null;\n        };\n        en.prototype.atX0MinutesPastTheHourGt20 = function () {\n          return null;\n        };\n        en.prototype.commaMonthX0ThroughMonthX1 = function () {\n          return null;\n        };\n        en.prototype.commaYearX0ThroughYearX1 = function () {\n          return null;\n        };\n        en.prototype.use24HourTimeFormatByDefault = function () {\n          return false;\n        };\n        en.prototype.anErrorOccuredWhenGeneratingTheExpressionD = function () {\n          return \"An error occured when generating the expression description.  Check the cron expression syntax.\";\n        };\n        en.prototype.everyMinute = function () {\n          return \"every minute\";\n        };\n        en.prototype.everyHour = function () {\n          return \"every hour\";\n        };\n        en.prototype.atSpace = function () {\n          return \"At \";\n        };\n        en.prototype.everyMinuteBetweenX0AndX1 = function () {\n          return \"Every minute between %s and %s\";\n        };\n        en.prototype.at = function () {\n          return \"At\";\n        };\n        en.prototype.spaceAnd = function () {\n          return \" and\";\n        };\n        en.prototype.everySecond = function () {\n          return \"every second\";\n        };\n        en.prototype.everyX0Seconds = function () {\n          return \"every %s seconds\";\n        };\n        en.prototype.secondsX0ThroughX1PastTheMinute = function () {\n          return \"seconds %s through %s past the minute\";\n        };\n        en.prototype.atX0SecondsPastTheMinute = function () {\n          return \"at %s seconds past the minute\";\n        };\n        en.prototype.everyX0Minutes = function () {\n          return \"every %s minutes\";\n        };\n        en.prototype.minutesX0ThroughX1PastTheHour = function () {\n          return \"minutes %s through %s past the hour\";\n        };\n        en.prototype.atX0MinutesPastTheHour = function () {\n          return \"at %s minutes past the hour\";\n        };\n        en.prototype.everyX0Hours = function () {\n          return \"every %s hours\";\n        };\n        en.prototype.betweenX0AndX1 = function () {\n          return \"between %s and %s\";\n        };\n        en.prototype.atX0 = function () {\n          return \"at %s\";\n        };\n        en.prototype.commaEveryDay = function () {\n          return \", every day\";\n        };\n        en.prototype.commaEveryX0DaysOfTheWeek = function () {\n          return \", every %s days of the week\";\n        };\n        en.prototype.commaX0ThroughX1 = function () {\n          return \", %s through %s\";\n        };\n        en.prototype.first = function () {\n          return \"first\";\n        };\n        en.prototype.second = function () {\n          return \"second\";\n        };\n        en.prototype.third = function () {\n          return \"third\";\n        };\n        en.prototype.fourth = function () {\n          return \"fourth\";\n        };\n        en.prototype.fifth = function () {\n          return \"fifth\";\n        };\n        en.prototype.commaOnThe = function () {\n          return \", on the \";\n        };\n        en.prototype.spaceX0OfTheMonth = function () {\n          return \" %s of the month\";\n        };\n        en.prototype.lastDay = function () {\n          return \"the last day\";\n        };\n        en.prototype.commaOnTheLastX0OfTheMonth = function () {\n          return \", on the last %s of the month\";\n        };\n        en.prototype.commaOnlyOnX0 = function () {\n          return \", only on %s\";\n        };\n        en.prototype.commaAndOnX0 = function () {\n          return \", and on %s\";\n        };\n        en.prototype.commaEveryX0Months = function () {\n          return \", every %s months\";\n        };\n        en.prototype.commaOnlyInX0 = function () {\n          return \", only in %s\";\n        };\n        en.prototype.commaOnTheLastDayOfTheMonth = function () {\n          return \", on the last day of the month\";\n        };\n        en.prototype.commaOnTheLastWeekdayOfTheMonth = function () {\n          return \", on the last weekday of the month\";\n        };\n        en.prototype.commaDaysBeforeTheLastDayOfTheMonth = function () {\n          return \", %s days before the last day of the month\";\n        };\n        en.prototype.firstWeekday = function () {\n          return \"first weekday\";\n        };\n        en.prototype.weekdayNearestDayX0 = function () {\n          return \"weekday nearest day %s\";\n        };\n        en.prototype.commaOnTheX0OfTheMonth = function () {\n          return \", on the %s of the month\";\n        };\n        en.prototype.commaEveryX0Days = function () {\n          return \", every %s days\";\n        };\n        en.prototype.commaBetweenDayX0AndX1OfTheMonth = function () {\n          return \", between day %s and %s of the month\";\n        };\n        en.prototype.commaOnDayX0OfTheMonth = function () {\n          return \", on day %s of the month\";\n        };\n        en.prototype.commaEveryHour = function () {\n          return \", every hour\";\n        };\n        en.prototype.commaEveryX0Years = function () {\n          return \", every %s years\";\n        };\n        en.prototype.commaStartingX0 = function () {\n          return \", starting %s\";\n        };\n        en.prototype.daysOfTheWeek = function () {\n          return [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n        };\n        en.prototype.monthsOfTheYear = function () {\n          return [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n        };\n        return en;\n      }();\n      exports.en = en;\n\n      /***/\n    }, /* 5 */\n    /***/function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.toString = void 0;\n      var expressionDescriptor_1 = __webpack_require__(0);\n      var enLocaleLoader_1 = __webpack_require__(6);\n      expressionDescriptor_1.ExpressionDescriptor.initialize(new enLocaleLoader_1.enLocaleLoader());\n      exports.default = expressionDescriptor_1.ExpressionDescriptor;\n      var toString = expressionDescriptor_1.ExpressionDescriptor.toString;\n      exports.toString = toString;\n\n      /***/\n    }, /* 6 */\n    /***/function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.enLocaleLoader = void 0;\n      var en_1 = __webpack_require__(4);\n      var enLocaleLoader = function () {\n        function enLocaleLoader() {}\n        enLocaleLoader.prototype.load = function (availableLocales) {\n          availableLocales[\"en\"] = new en_1.en();\n        };\n        return enLocaleLoader;\n      }();\n      exports.enLocaleLoader = enLocaleLoader;\n\n      /***/\n    }\n    /******/])\n  );\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}