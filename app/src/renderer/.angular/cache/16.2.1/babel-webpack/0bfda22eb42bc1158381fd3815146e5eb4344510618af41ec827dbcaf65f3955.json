{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/msorensen/work/scheduler/app/src/renderer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { addTask, saveTask, updateTaskForm } from 'src/app/@core/store/actions/schedule.actions';\nimport { remote } from 'electron';\nimport { selectTaskForm } from 'src/app/@core/store/selectors/taskForm.schedule';\nimport { AdvancedTaskFormDialogueComponent } from 'src/app/dialogues/advanced-task-form-dialogue/advanced-task-form-dialogue.component';\nimport { FormControl } from '@angular/forms';\nimport { take } from 'rxjs/operators';\nimport { initialTaskFormState } from '../../@core/store/reducers/taskForm.reducer';\nimport { resetTaskForm } from 'src/app/@core/store/actions/schedule.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@angular/forms\";\nfunction AdvancedTaskFormComponent_ng_container_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"mat-form-field\", 2)(2, \"mat-label\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r5 = ctx.index;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"argument \", i_r5, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"name\", \"argument \" + i_r5)(\"formControlName\", i_r5);\n  }\n}\nfunction AdvancedTaskFormComponent_ng_container_33_div_13_mat_option_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 30);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r11 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r11.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r11.display, \" \");\n  }\n}\nfunction AdvancedTaskFormComponent_ng_container_33_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"mat-form-field\", 2)(2, \"mat-label\");\n    i0.ɵɵtext(3, \"Interval\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-select\", 28);\n    i0.ɵɵtemplate(5, AdvancedTaskFormComponent_ng_container_33_div_13_mat_option_5_Template, 2, 2, \"mat-option\", 29);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r8.intervalOptions);\n  }\n}\nfunction AdvancedTaskFormComponent_ng_container_33_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31)(1, \"mat-form-field\", 2)(2, \"mat-label\");\n    i0.ɵɵtext(3, \"CRON\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 32);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\", 33);\n    i0.ɵɵtext(6);\n    i0.ɵɵpipe(7, \"cronStr\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(7, 1, ctx_r9.getTriggerValue()));\n  }\n}\nfunction AdvancedTaskFormComponent_ng_container_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 20)(2, \"mat-form-field\", 2)(3, \"mat-label\");\n    i0.ɵɵtext(4, \"Trigger Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"mat-select\", 21)(6, \"mat-option\", 22);\n    i0.ɵɵtext(7, \"interval\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"mat-option\", 23);\n    i0.ɵɵtext(9, \"CRON\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"mat-option\", 24);\n    i0.ɵɵtext(11, \"startup\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"div\", 25);\n    i0.ɵɵtemplate(13, AdvancedTaskFormComponent_ng_container_33_div_13_Template, 6, 1, \"div\", 26);\n    i0.ɵɵtemplate(14, AdvancedTaskFormComponent_ng_container_33_div_14_Template, 8, 3, \"div\", 27);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const trigger_r6 = ctx.$implicit;\n    const i_r7 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r7);\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"ngSwitch\", trigger_r6.value.type);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", \"interval\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", \"CRON\");\n  }\n}\nfunction AdvancedTaskFormComponent_ng_container_40_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function AdvancedTaskFormComponent_ng_container_40_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.reset());\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"cancel\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"button\", 34);\n    i0.ɵɵlistener(\"click\", function AdvancedTaskFormComponent_ng_container_40_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.save());\n    });\n    i0.ɵɵelementStart(5, \"mat-icon\");\n    i0.ɵɵtext(6, \"save\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(7, \" Save \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction AdvancedTaskFormComponent_ng_container_41_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"button\", 34);\n    i0.ɵɵlistener(\"click\", function AdvancedTaskFormComponent_ng_container_41_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.create());\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"add\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" Create \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\nexport let AdvancedTaskFormComponent = /*#__PURE__*/(() => {\n  var _class;\n  class AdvancedTaskFormComponent {\n    get triggers() {\n      return this.taskForm.get('triggers');\n    }\n    get arguments() {\n      return this.taskForm.get('arguments');\n    }\n    // get spawnOptions() {\n    //   return this.taskForm.get('spawnOptions') as FormGroup;\n    // }\n    getTriggerValue() {\n      return this.triggers.get('0')?.get('value')?.value;\n    }\n    constructor(store, dialog, fb) {\n      this.store = store;\n      this.dialog = dialog;\n      this.fb = fb;\n      this.intervalOptions = [{\n        display: 'daily',\n        value: 86400000\n      }, {\n        display: 'weekly',\n        value: 604800000\n      }, {\n        display: 'monthly',\n        value: 2592000000\n      }];\n    }\n    ngOnInit() {\n      this.store.select(selectTaskForm).pipe(take(1)).subscribe(task => {\n        this.task = task;\n        this.taskForm = this.fb.group({\n          ...task,\n          arguments: task.arguments ? this.fb.array(task.arguments?.map(arg => this.fb.control(arg))) : [],\n          triggers: task.triggers ? this.fb.array(task.triggers.map(trigger => this.fb.group(trigger))) : [],\n          spawnOptions: task.spawnOptions ? this.fb.group(task.spawnOptions) : {}\n        });\n        this.triggerType = task.triggers ? task.triggers[0].type : 'interval';\n        this.taskForm.valueChanges.subscribe(taskForm => {\n          this.store.dispatch(updateTaskForm({\n            taskForm\n          }));\n        });\n      });\n      /**\n       * this listens for the trigger control type to change then will set some default values\n       */\n      this.triggers.controls[0].get('type')?.valueChanges.subscribe(type => {\n        if (type !== this.triggerType) {\n          switch (type) {\n            case 'startup':\n              this.triggers.controls[0].get('value')?.setValue('');\n              break;\n            case 'CRON':\n              this.triggers.controls[0].get('value')?.setValue('* * * * * *');\n              break;\n            case 'interval':\n              this.triggers.controls[0].get('value')?.setValue(86400000);\n          }\n        }\n      });\n    }\n    advanced() {\n      this.dialog.open(AdvancedTaskFormDialogueComponent);\n    }\n    browse() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const dialogResponse = yield remote.dialog.showOpenDialog({\n          properties: ['openFile', 'showHiddenFiles']\n        });\n        const path = `\"${dialogResponse.filePaths[0]}\"`;\n        const commandControl = _this.taskForm.get('command');\n        const commandControlValue = commandControl?.value;\n        commandControl?.setValue(commandControlValue + path);\n      })();\n    }\n    reset() {\n      this.store.dispatch(resetTaskForm());\n      this.taskForm.setValue(initialTaskFormState);\n    }\n    create() {\n      this.store.dispatch(addTask());\n      this.taskForm.setValue(initialTaskFormState);\n    }\n    save() {\n      this.store.dispatch(saveTask());\n    }\n    addArgument() {\n      this.arguments.push(new FormControl(''));\n    }\n  }\n  _class = AdvancedTaskFormComponent;\n  _class.ɵfac = function AdvancedTaskFormComponent_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(i1.Store), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(i3.FormBuilder));\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"app-advanced-task-form\"]],\n    decls: 42,\n    vars: 5,\n    consts: [[\"fxLayout\", \"column\", \"fxLayoutGap\", \"16px\", 3, \"formGroup\"], [\"fxLayout\", \"row\", \"fxLayoutGap\", \"16px\", \"fxLayoutAlign\", \"start center\"], [\"appearance\", \"outline\"], [\"matInput\", \"\", \"name\", \"name\", \"formControlName\", \"name\"], [\"matInput\", \"\", \"placeholder\", \"Ex. C:/chrome.exe\", \"name\", \"task\", \"formControlName\", \"command\"], [\"mat-raised-button\", \"\", \"fxFlex\", \"0 1 auto\", 3, \"click\"], [\"formArrayName\", \"arguments\", \"fxLayout\", \"column\"], [4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [\"formGroupName\", \"spawnOptions\", \"fxLayout\", \"column\"], [\"matInput\", \"\", \"placeholder\", \"Ex. C:/chrome.exe\", \"name\", \"cwd\", \"formControlName\", \"cwd\"], [\"formControlName\", \"detached\"], [\"formControlName\", \"shell\"], [\"formArrayName\", \"triggers\"], [1, \"relative\"], [\"appearance\", \"outline\", 1, \"fill\"], [\"matInput\", \"\", \"placeholder\", \"about my cool task\", \"rows\", \"4\", \"name\", \"description\", \"formControlName\", \"description\", 1, \"no-resize\"], [\"fxLayout\", \"row\", \"fxLayoutGap\", \"16px\", 1, \"actions\"], [4, \"ngIf\"], [\"matInput\", \"\", \"placeholder\", \"Ex. C:/chrome.exe\", 3, \"name\", \"formControlName\"], [\"fxLayout\", \"row\", \"fxLayout\", \"row\", \"fxLayoutGap\", \"16px\", \"fxLayoutAlign\", \"start center\", 3, \"formGroupName\"], [\"formControlName\", \"type\"], [\"value\", \"interval\"], [\"value\", \"CRON\"], [\"value\", \"startup\"], [3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [\"fxLayout\", \"column\", \"class\", \"cron\", 4, \"ngSwitchCase\"], [\"name\", \"value\", \"formControlName\", \"value\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [\"fxLayout\", \"column\", 1, \"cron\"], [\"matInput\", \"\", \"placeholder\", \"* * * * * * \", \"formControlName\", \"value\"], [1, \"cronstring\"], [\"type\", \"submit\", \"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"]],\n    template: function AdvancedTaskFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"div\", 1)(2, \"mat-form-field\", 2)(3, \"mat-label\");\n        i0.ɵɵtext(4, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"input\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"mat-form-field\", 2)(7, \"mat-label\");\n        i0.ɵɵtext(8, \"Command\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function AdvancedTaskFormComponent_Template_button_click_10_listener() {\n          return ctx.browse();\n        });\n        i0.ɵɵtext(11, \" Browse... \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 6)(13, \"h2\");\n        i0.ɵɵtext(14, \"Arguments\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(15, AdvancedTaskFormComponent_ng_container_15_Template, 5, 3, \"ng-container\", 7);\n        i0.ɵɵelementStart(16, \"div\")(17, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function AdvancedTaskFormComponent_Template_button_click_17_listener() {\n          return ctx.addArgument();\n        });\n        i0.ɵɵelementStart(18, \"mat-icon\");\n        i0.ɵɵtext(19, \"add\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(20, \"div\", 9)(21, \"h2\");\n        i0.ɵɵtext(22, \"Options\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"mat-form-field\", 2)(24, \"mat-label\");\n        i0.ɵɵtext(25, \"Current Working Directory\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(26, \"input\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"mat-checkbox\", 11);\n        i0.ɵɵtext(28, \"detached\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"mat-checkbox\", 12);\n        i0.ɵɵtext(30, \"shell\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(31, \"div\", 1)(32, \"div\", 13);\n        i0.ɵɵtemplate(33, AdvancedTaskFormComponent_ng_container_33_Template, 15, 4, \"ng-container\", 7);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(34, \"div\", 14)(35, \"mat-form-field\", 15)(36, \"mat-label\");\n        i0.ɵɵtext(37, \"Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(38, \"textarea\", 16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(39, \"div\", 17);\n        i0.ɵɵtemplate(40, AdvancedTaskFormComponent_ng_container_40_Template, 8, 0, \"ng-container\", 18);\n        i0.ɵɵtemplate(41, AdvancedTaskFormComponent_ng_container_41_Template, 5, 0, \"ng-container\", 18);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.taskForm);\n        i0.ɵɵadvance(15);\n        i0.ɵɵproperty(\"ngForOf\", ctx.arguments.controls);\n        i0.ɵɵadvance(18);\n        i0.ɵɵproperty(\"ngForOf\", ctx.triggers.controls);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.task.id);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.task.id);\n      }\n    },\n    styles: [\"[_nghost-%COMP%]{display:block;padding:16px 16px 0}.relative[_ngcontent-%COMP%]{position:relative}div.actions[_ngcontent-%COMP%]{position:absolute;bottom:30px;right:16px}.fill[_ngcontent-%COMP%]{width:100%}textarea.no-resize[_ngcontent-%COMP%]{resize:none}.cron[_ngcontent-%COMP%]{position:relative}.cron[_ngcontent-%COMP%]   .cronstring[_ngcontent-%COMP%]{position:absolute;bottom:-15px;white-space:nowrap}\"]\n  });\n  return AdvancedTaskFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}