{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { ipcRenderer } from 'electron';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { ADD_TASK_EVENT } from '../../../../../../event-names';\nimport { startLoading } from '../actions/gui.actions';\nimport { addTask, resetTaskForm, saveTask } from '../actions/schedule.actions';\nimport { UPDATE_TASK_EVENT } from '../../../../../../event-names';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@ngrx/store\";\nexport let TaskFormEffects = /*#__PURE__*/(() => {\n  var _class;\n  class TaskFormEffects {\n    constructor(actions$, store$) {\n      this.actions$ = actions$;\n      this.store$ = store$;\n      this.addTask$ = createEffect(() => this.actions$.pipe(ofType(addTask), withLatestFrom(this.store$, (action, state) => {\n        return state.taskForm;\n      }), map(task => {\n        ipcRenderer.send(ADD_TASK_EVENT, task);\n        this.store$.dispatch(resetTaskForm());\n        this.store$.dispatch(startLoading());\n      })), {\n        dispatch: false\n      });\n      this.saveTask$ = createEffect(() => this.actions$.pipe(ofType(saveTask), withLatestFrom(this.store$, (action, state) => {\n        return state.taskForm;\n      }), map(task => {\n        ipcRenderer.send(UPDATE_TASK_EVENT, task);\n        this.store$.dispatch(startLoading());\n      })), {\n        dispatch: false\n      });\n    }\n  }\n  _class = TaskFormEffects;\n  _class.ɵfac = function TaskFormEffects_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.Store));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac\n  });\n  return TaskFormEffects;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}