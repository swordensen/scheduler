{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { map } from 'rxjs/operators';\nimport { ipcRenderer } from 'electron';\nimport { deleteTask, getSchedule, openLogFile, startTask, stopTask } from '../actions/schedule.actions';\nimport { DELETE_TASK_EVENT, GET_SCHEDULE_EVENT, OPEN_TASK_LOG_FILE_EVENT, START_TASK_EVENT, STOP_TASK_EVENT } from '../../../../../../event-names';\nimport { startLoading, stopLoading } from '../actions/gui.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@ngrx/store\";\nexport let ScheduleEffects = /*#__PURE__*/(() => {\n  var _class;\n  class ScheduleEffects {\n    constructor(actions$, store$) {\n      this.actions$ = actions$;\n      this.store$ = store$;\n      this.getSchedule$ = createEffect(() => this.actions$.pipe(ofType(getSchedule), map(() => {\n        ipcRenderer.send(GET_SCHEDULE_EVENT);\n        this.store$.dispatch(stopLoading());\n      })), {\n        dispatch: false\n      });\n      this.startTask$ = createEffect(() => this.actions$.pipe(ofType(startTask), map(({\n        task\n      }) => {\n        ipcRenderer.send(START_TASK_EVENT, task);\n        this.store$.dispatch(startLoading());\n      })), {\n        dispatch: false\n      });\n      this.stopTask$ = createEffect(() => this.actions$.pipe(ofType(stopTask), map(({\n        task\n      }) => {\n        ipcRenderer.send(STOP_TASK_EVENT, task);\n        this.store$.dispatch(stopLoading());\n      })), {\n        dispatch: false\n      });\n      this.deleteTask$ = createEffect(() => this.actions$.pipe(ofType(deleteTask), map(({\n        task\n      }) => {\n        ipcRenderer.send(DELETE_TASK_EVENT, task);\n        this.store$.dispatch(startLoading());\n      })), {\n        dispatch: false\n      });\n      this.openLogFile$ = createEffect(() => this.actions$.pipe(ofType(openLogFile), map(({\n        task\n      }) => {\n        ipcRenderer.send(OPEN_TASK_LOG_FILE_EVENT, task);\n      })), {\n        dispatch: false\n      });\n    }\n  }\n  _class = ScheduleEffects;\n  _class.ɵfac = function ScheduleEffects_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.Store));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac\n  });\n  return ScheduleEffects;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}